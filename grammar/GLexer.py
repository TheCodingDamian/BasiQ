# Generated from G.g4 by ANTLR 4.7.2
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2,")
        buf.write("\u0109\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\3\2\3\2\3\3\3\3")
        buf.write("\3\4\3\4\3\5\3\5\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3\b\3\b\3")
        buf.write("\b\3\t\3\t\3\t\3\n\3\n\3\13\3\13\3\f\3\f\3\f\3\f\3\f\3")
        buf.write("\f\3\f\3\r\3\r\3\r\3\16\3\16\3\16\3\16\3\16\3\16\3\16")
        buf.write("\3\16\3\17\3\17\3\17\3\17\3\17\3\20\3\20\3\20\3\20\3\21")
        buf.write("\3\21\3\21\3\22\3\22\3\22\3\22\3\22\3\22\3\23\3\23\3\24")
        buf.write("\3\24\3\24\3\25\3\25\3\26\3\26\3\27\3\27\3\27\3\30\3\30")
        buf.write("\3\31\3\31\3\32\3\32\3\33\3\33\3\34\3\34\3\35\3\35\3\35")
        buf.write("\3\36\3\36\3\36\3\37\3\37\3\37\3 \3 \3 \3!\3!\3!\3\"\3")
        buf.write("\"\3\"\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3")
        buf.write("#\3#\3#\3#\3#\3#\3#\3#\5#\u00d4\n#\3$\3$\3$\3$\3$\3$\3")
        buf.write("$\3$\3$\5$\u00df\n$\3%\5%\u00e2\n%\3%\6%\u00e5\n%\r%\16")
        buf.write("%\u00e6\3&\3&\7&\u00eb\n&\f&\16&\u00ee\13&\3\'\3\'\3\'")
        buf.write("\3\'\3(\3(\7(\u00f6\n(\f(\16(\u00f9\13(\3(\3(\3)\3)\3")
        buf.write("*\3*\3+\3+\7+\u0103\n+\f+\16+\u0106\13+\3+\3+\3\u00f7")
        buf.write("\2,\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r")
        buf.write("\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30")
        buf.write("/\31\61\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'")
        buf.write("M(O)Q*S+U,\3\2\t\3\2//\3\2\62;\4\2C\\c|\6\2\62;C\\aac")
        buf.write("|\5\2\13\f\17\17\"\"\3\2%%\3\2$$\2\u0113\2\3\3\2\2\2\2")
        buf.write("\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3")
        buf.write("\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2")
        buf.write("\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2")
        buf.write("\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3")
        buf.write("\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61")
        buf.write("\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2")
        buf.write("\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3")
        buf.write("\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M")
        buf.write("\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\3")
        buf.write("W\3\2\2\2\5Y\3\2\2\2\7[\3\2\2\2\t]\3\2\2\2\13_\3\2\2\2")
        buf.write("\ra\3\2\2\2\17f\3\2\2\2\21i\3\2\2\2\23l\3\2\2\2\25n\3")
        buf.write("\2\2\2\27p\3\2\2\2\31w\3\2\2\2\33z\3\2\2\2\35\u0082\3")
        buf.write("\2\2\2\37\u0087\3\2\2\2!\u008b\3\2\2\2#\u008e\3\2\2\2")
        buf.write("%\u0094\3\2\2\2\'\u0096\3\2\2\2)\u0099\3\2\2\2+\u009b")
        buf.write("\3\2\2\2-\u009d\3\2\2\2/\u00a0\3\2\2\2\61\u00a2\3\2\2")
        buf.write("\2\63\u00a4\3\2\2\2\65\u00a6\3\2\2\2\67\u00a8\3\2\2\2")
        buf.write("9\u00aa\3\2\2\2;\u00ad\3\2\2\2=\u00b0\3\2\2\2?\u00b3\3")
        buf.write("\2\2\2A\u00b6\3\2\2\2C\u00b9\3\2\2\2E\u00d3\3\2\2\2G\u00de")
        buf.write("\3\2\2\2I\u00e1\3\2\2\2K\u00e8\3\2\2\2M\u00ef\3\2\2\2")
        buf.write("O\u00f3\3\2\2\2Q\u00fc\3\2\2\2S\u00fe\3\2\2\2U\u0100\3")
        buf.write("\2\2\2WX\7]\2\2X\4\3\2\2\2YZ\7.\2\2Z\6\3\2\2\2[\\\7_\2")
        buf.write("\2\\\b\3\2\2\2]^\7?\2\2^\n\3\2\2\2_`\7<\2\2`\f\3\2\2\2")
        buf.write("ab\7h\2\2bc\7w\2\2cd\7p\2\2de\7e\2\2e\16\3\2\2\2fg\7*")
        buf.write("\2\2gh\7+\2\2h\20\3\2\2\2ij\7/\2\2jk\7@\2\2k\22\3\2\2")
        buf.write("\2lm\7*\2\2m\24\3\2\2\2no\7+\2\2o\26\3\2\2\2pq\7t\2\2")
        buf.write("qr\7g\2\2rs\7v\2\2st\7w\2\2tu\7t\2\2uv\7p\2\2v\30\3\2")
        buf.write("\2\2wx\7k\2\2xy\7h\2\2y\32\3\2\2\2z{\7g\2\2{|\7n\2\2|")
        buf.write("}\7u\2\2}~\7g\2\2~\177\7\"\2\2\177\u0080\7k\2\2\u0080")
        buf.write("\u0081\7h\2\2\u0081\34\3\2\2\2\u0082\u0083\7g\2\2\u0083")
        buf.write("\u0084\7n\2\2\u0084\u0085\7u\2\2\u0085\u0086\7g\2\2\u0086")
        buf.write("\36\3\2\2\2\u0087\u0088\7h\2\2\u0088\u0089\7q\2\2\u0089")
        buf.write("\u008a\7t\2\2\u008a \3\2\2\2\u008b\u008c\7k\2\2\u008c")
        buf.write("\u008d\7p\2\2\u008d\"\3\2\2\2\u008e\u008f\7y\2\2\u008f")
        buf.write("\u0090\7j\2\2\u0090\u0091\7k\2\2\u0091\u0092\7n\2\2\u0092")
        buf.write("\u0093\7g\2\2\u0093$\3\2\2\2\u0094\u0095\7#\2\2\u0095")
        buf.write("&\3\2\2\2\u0096\u0097\7,\2\2\u0097\u0098\7,\2\2\u0098")
        buf.write("(\3\2\2\2\u0099\u009a\7,\2\2\u009a*\3\2\2\2\u009b\u009c")
        buf.write("\7\61\2\2\u009c,\3\2\2\2\u009d\u009e\7\61\2\2\u009e\u009f")
        buf.write("\7\61\2\2\u009f.\3\2\2\2\u00a0\u00a1\7\'\2\2\u00a1\60")
        buf.write("\3\2\2\2\u00a2\u00a3\7-\2\2\u00a3\62\3\2\2\2\u00a4\u00a5")
        buf.write("\7/\2\2\u00a5\64\3\2\2\2\u00a6\u00a7\7>\2\2\u00a7\66\3")
        buf.write("\2\2\2\u00a8\u00a9\7@\2\2\u00a98\3\2\2\2\u00aa\u00ab\7")
        buf.write(">\2\2\u00ab\u00ac\7?\2\2\u00ac:\3\2\2\2\u00ad\u00ae\7")
        buf.write("@\2\2\u00ae\u00af\7?\2\2\u00af<\3\2\2\2\u00b0\u00b1\7")
        buf.write("?\2\2\u00b1\u00b2\7?\2\2\u00b2>\3\2\2\2\u00b3\u00b4\7")
        buf.write("#\2\2\u00b4\u00b5\7?\2\2\u00b5@\3\2\2\2\u00b6\u00b7\7")
        buf.write("(\2\2\u00b7\u00b8\7(\2\2\u00b8B\3\2\2\2\u00b9\u00ba\7")
        buf.write("~\2\2\u00ba\u00bb\7~\2\2\u00bbD\3\2\2\2\u00bc\u00bd\7")
        buf.write("p\2\2\u00bd\u00be\7w\2\2\u00be\u00d4\7o\2\2\u00bf\u00c0")
        buf.write("\7v\2\2\u00c0\u00c1\7g\2\2\u00c1\u00c2\7z\2\2\u00c2\u00d4")
        buf.write("\7v\2\2\u00c3\u00c4\7d\2\2\u00c4\u00c5\7q\2\2\u00c5\u00c6")
        buf.write("\7q\2\2\u00c6\u00d4\7n\2\2\u00c7\u00c8\7x\2\2\u00c8\u00c9")
        buf.write("\7q\2\2\u00c9\u00ca\7k\2\2\u00ca\u00d4\7f\2\2\u00cb\u00cc")
        buf.write("\7n\2\2\u00cc\u00cd\7k\2\2\u00cd\u00ce\7u\2\2\u00ce\u00d4")
        buf.write("\7v\2\2\u00cf\u00d0\7f\2\2\u00d0\u00d1\7k\2\2\u00d1\u00d2")
        buf.write("\7e\2\2\u00d2\u00d4\7v\2\2\u00d3\u00bc\3\2\2\2\u00d3\u00bf")
        buf.write("\3\2\2\2\u00d3\u00c3\3\2\2\2\u00d3\u00c7\3\2\2\2\u00d3")
        buf.write("\u00cb\3\2\2\2\u00d3\u00cf\3\2\2\2\u00d4F\3\2\2\2\u00d5")
        buf.write("\u00d6\7H\2\2\u00d6\u00d7\7c\2\2\u00d7\u00d8\7n\2\2\u00d8")
        buf.write("\u00d9\7u\2\2\u00d9\u00df\7g\2\2\u00da\u00db\7V\2\2\u00db")
        buf.write("\u00dc\7t\2\2\u00dc\u00dd\7w\2\2\u00dd\u00df\7g\2\2\u00de")
        buf.write("\u00d5\3\2\2\2\u00de\u00da\3\2\2\2\u00dfH\3\2\2\2\u00e0")
        buf.write("\u00e2\t\2\2\2\u00e1\u00e0\3\2\2\2\u00e1\u00e2\3\2\2\2")
        buf.write("\u00e2\u00e4\3\2\2\2\u00e3\u00e5\t\3\2\2\u00e4\u00e3\3")
        buf.write("\2\2\2\u00e5\u00e6\3\2\2\2\u00e6\u00e4\3\2\2\2\u00e6\u00e7")
        buf.write("\3\2\2\2\u00e7J\3\2\2\2\u00e8\u00ec\t\4\2\2\u00e9\u00eb")
        buf.write("\t\5\2\2\u00ea\u00e9\3\2\2\2\u00eb\u00ee\3\2\2\2\u00ec")
        buf.write("\u00ea\3\2\2\2\u00ec\u00ed\3\2\2\2\u00edL\3\2\2\2\u00ee")
        buf.write("\u00ec\3\2\2\2\u00ef\u00f0\t\6\2\2\u00f0\u00f1\3\2\2\2")
        buf.write("\u00f1\u00f2\b\'\2\2\u00f2N\3\2\2\2\u00f3\u00f7\t\7\2")
        buf.write("\2\u00f4\u00f6\13\2\2\2\u00f5\u00f4\3\2\2\2\u00f6\u00f9")
        buf.write("\3\2\2\2\u00f7\u00f8\3\2\2\2\u00f7\u00f5\3\2\2\2\u00f8")
        buf.write("\u00fa\3\2\2\2\u00f9\u00f7\3\2\2\2\u00fa\u00fb\b(\2\2")
        buf.write("\u00fbP\3\2\2\2\u00fc\u00fd\7}\2\2\u00fdR\3\2\2\2\u00fe")
        buf.write("\u00ff\7\177\2\2\u00ffT\3\2\2\2\u0100\u0104\7$\2\2\u0101")
        buf.write("\u0103\n\b\2\2\u0102\u0101\3\2\2\2\u0103\u0106\3\2\2\2")
        buf.write("\u0104\u0102\3\2\2\2\u0104\u0105\3\2\2\2\u0105\u0107\3")
        buf.write("\2\2\2\u0106\u0104\3\2\2\2\u0107\u0108\7$\2\2\u0108V\3")
        buf.write("\2\2\2\n\2\u00d3\u00de\u00e1\u00e6\u00ec\u00f7\u0104\3")
        buf.write("\b\2\2")
        return buf.getvalue()


class GLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    TYPE = 34
    BOOL = 35
    NUMBER = 36
    IDENTIFIER = 37
    WP = 38
    COMMENT = 39
    BLOCK_OPEN = 40
    BLOCK_CLOSE = 41
    STRING = 42

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'['", "','", "']'", "'='", "':'", "'func'", "'()'", "'->'", 
            "'('", "')'", "'return'", "'if'", "'else if'", "'else'", "'for'", 
            "'in'", "'while'", "'!'", "'**'", "'*'", "'/'", "'//'", "'%'", 
            "'+'", "'-'", "'<'", "'>'", "'<='", "'>='", "'=='", "'!='", 
            "'&&'", "'||'", "'{'", "'}'" ]

    symbolicNames = [ "<INVALID>",
            "TYPE", "BOOL", "NUMBER", "IDENTIFIER", "WP", "COMMENT", "BLOCK_OPEN", 
            "BLOCK_CLOSE", "STRING" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "TYPE", "BOOL", "NUMBER", "IDENTIFIER", "WP", 
                  "COMMENT", "BLOCK_OPEN", "BLOCK_CLOSE", "STRING" ]

    grammarFileName = "G.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


